type Query {
  books(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): BookConnection
  book(id: ID!): Book
  authors(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): AuthorConnection
  author(id: ID!): Author
  libraries(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): LibraryConnection
  library(id: ID!): Library
  genres(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): GenreConnection
  genre(id: ID!): Genre

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

"""
A connection to a list of items.
"""
type BookConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BookEdge]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type BookEdge {
  """
  The item at the end of the edge
  """
  node: Book

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Book implements Node & MetaNode {
  """
  The ID of an object
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  isbn: String
  identifier: String!
  author: Author!
  genres(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): GenreConnection

  """
  Current location of book is available in. Use author location to get original location where book belonged to.
  """
  location: Library
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

interface MetaNode {
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Author implements Node & MetaNode {
  """
  The ID of an object
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!

  """
  Library author belongs to
  """
  library: Library

  """
  All books by author
  """
  books(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): BookConnection
}

type Library implements Node & MetaNode {
  """
  The ID of an object
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: Address!
  phone: PhoneNumber!
  email: EmailAddress!

  """
  People managing the library
  """
  management(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): UserConnection

  """
  All available books in library
  """
  books(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): BookConnection

  """
  Issued books
  """
  borrowers(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): IssueConnection
}

type Address {
  street: String!
  city: String!
  country: String!
  zip: String!
  additional: String
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserEdge]
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge
  """
  node: User

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type User implements Node & MetaNode {
  """
  The ID of an object
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: EmailAddress!
  phone: PhoneNumber!
  address: Address!

  """
  Books borrowed by user
  """
  booksIssued(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): IssueConnection

  """
  Libraries managed by user
  """
  managing(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): LibraryConnection
}

"""
A connection to a list of items.
"""
type IssueConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [IssueEdge]
}

"""
An edge in a connection.
"""
type IssueEdge {
  """
  The item at the end of the edge
  """
  node: Issue

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Issue implements Node & MetaNode {
  """
  The ID of an object
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  dueDate: DateTime!
  book: Book!
  borrower: User!
  location: Library!
}

"""
A connection to a list of items.
"""
type LibraryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [LibraryEdge]
}

"""
An edge in a connection.
"""
type LibraryEdge {
  """
  The item at the end of the edge
  """
  node: Library

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type GenreConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [GenreEdge]
}

"""
An edge in a connection.
"""
type GenreEdge {
  """
  The item at the end of the edge
  """
  node: Genre

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Genre implements Node & MetaNode {
  """
  The ID of an object
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  books(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): BookConnection
}

"""
A connection to a list of items.
"""
type AuthorConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [AuthorEdge]
}

"""
An edge in a connection.
"""
type AuthorEdge {
  """
  The item at the end of the edge
  """
  node: Author

  """
  A cursor for use in pagination
  """
  cursor: String!
}
